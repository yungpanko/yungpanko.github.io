<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-07-27T10:33:07-04:00</updated><id>http://localhost:4000/</id><title type="html">Jared Johnson</title><subtitle>Tech and Public Policy are on a collision course. I'm working to mitigate the damage.
</subtitle><author><name>Jared Johnson</name></author><entry><title type="html">How I built my personal website</title><link href="http://localhost:4000/2017/07/22/how-i-built-my-website.html" rel="alternate" type="text/html" title="How I built my personal website" /><published>2017-07-22T00:00:00-04:00</published><updated>2017-07-22T00:00:00-04:00</updated><id>http://localhost:4000/2017/07/22/how-i-built-my-website</id><content type="html" xml:base="http://localhost:4000/2017/07/22/how-i-built-my-website.html">&lt;p&gt;Last weekend, I decided to build my own personal website and I thought it would be a helpful resource to document the steps that I took to get &lt;a href=&quot;http://jared-johnson.com/&quot;&gt;jared-johnson.com&lt;/a&gt; up and running.&lt;/p&gt;

&lt;h3 id=&quot;hosting-on-github-pages&quot;&gt;Hosting on Github Pages&lt;/h3&gt;

&lt;p&gt;I decided to set my website up using &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. For those who aren’t familiar with GitHub, it’s a &lt;a href=&quot;https://en.wikipedia.org/wiki/GitHub&quot;&gt;version control repository&lt;/a&gt; for code. What this means is that developers use it to preserve iterations of their projects and applications. It’s a great tool and for those new to programming, I highly recommend checking it out.&lt;/p&gt;

&lt;p&gt;Ok so what is GitHub Pages? GitHub offers a relatively easy way for users to host projects and personal websites to the web for free. And you’re able to manage your website using the same workflow that you’ll be familiar with from working with code projects on GitHub.&lt;/p&gt;

&lt;p&gt;To start using GitHub Pages for your website, the first think you will need to do is &lt;a href=&quot;https://github.com/new&quot;&gt;create a repository&lt;/a&gt; with your GitHub username and the extension &lt;em&gt;‘.github.io’&lt;/em&gt; – it should look something like this:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;your-username.github.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you have this repository set up, the only file you need to create your website something called &lt;em&gt;index.html&lt;/em&gt;. I cloned my repository down locally and set my website up with it’s own directory but if these words mean nothing to you, I would recommend downloading the &lt;a href=&quot;https://central.github.com/mac/latest&quot;&gt;GitHub app&lt;/a&gt; to interface with your website repo.&lt;/p&gt;

&lt;p&gt;Using a text editor like &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;, try typing &lt;em&gt;‘it’s my website’&lt;/em&gt; in your &lt;em&gt;index.html&lt;/em&gt; file and sending those changes up to GitHub using the code below if you’re using the terminal, or by syncing your changes if you are using the GitHub app.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
git commit -m &quot;my first commit&quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now go to your-username.github.io in your browser and you should see something like this!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/website1.png&quot; alt=&quot;your very own website!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Your website is now live and you have the freedom to make it anything you want. Once I got to this point, I only partly felt satisfied. I have a functioning website but I have to type in the full &lt;em&gt;.github.io&lt;/em&gt; URL to access my site. Wouldn’t it be cooler if I could pull my website up with a snappy &lt;em&gt;‘.com’&lt;/em&gt; address? Well, you can be the judge of that but I knew my next step was to buy a domain.&lt;/p&gt;

&lt;h3 id=&quot;buying-and-setting-up-my-domain&quot;&gt;Buying and setting up my domain&lt;/h3&gt;

&lt;p&gt;First thing I did? High-tailed it to &lt;a href=&quot;https://www.godaddy.com/&quot;&gt;GoDaddy.com&lt;/a&gt;. Dot com domain names can get pricey and I was lucky to find &lt;a href=&quot;/&quot;&gt;jared-johnson.com&lt;/a&gt; at an affordable price (Although I did opt to pay a premium to insert a dash between my name rather than purchasing &lt;a href=&quot;http://www.jaredjohnson.net&quot;&gt;jaredjohnson.net&lt;/a&gt; or &lt;a href=&quot;http://www.jaredjohnson.us&quot;&gt;jaredjohnson.us&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To get my GitHub site to be served to my fancy new domain name, I had to complete a few more steps. First, I had to let GitHub know that I was using a custom domain. In the ‘settings’ tab of your repository, you should find a box to enter a different URL (see below).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/website2.png&quot; alt=&quot; custom domain box&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After letting GitHub know to serve your custom domain, you will need to let your DNS provider (GoDaddy in my case) know where to route your URL. I found a really helpful &lt;a href=&quot;https://medium.com/@kswanie21/how-to-set-up-godaddy-domain-with-github-pages-a9300366c7b&quot;&gt;blog post&lt;/a&gt; by Kristen Swanson that details the steps needed to set this up if you are also using GoDaddy.&lt;/p&gt;

&lt;h3 id=&quot;building-the-site&quot;&gt;Building the site&lt;/h3&gt;

&lt;p&gt;As awesome as it is to own a URL on the internet that just says “it’s my website,” I knew that I wanted to use my site for blogging. By now, I know enough programming to build something from scratch that looks good but my experience has also taught me just how much work can go into maintaining something as simple as a blog. Drawing routes for all my posts, formatting my plain text and designing my site in plain HTML/CSS was starting to look like a part-time job. That was until I discovered &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jekyll is a static-site generator built by one of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tom_Preston-Werner&quot;&gt;co-founders&lt;/a&gt; of GitHub. Ok but what is a static-site generator? This just means that Jekyll is an application that can render all of the pages of your website from plain text and a template. Jekyll uses &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown Syntax&lt;/a&gt;, which is mostly plain text that renders to HTML, to tell your site what the contents of each page or post should be. It makes managing your site so much easier. With all of this said, understanding a little bit of HTML and CSS is extremely useful when using Jekyll, which I will demonstrate later.&lt;/p&gt;

&lt;p&gt;Allow me to show you an example to better hammer home why this is so useful and then I’ll discuss setting up Jekyll.&lt;/p&gt;

&lt;p&gt;This is what the Markdown syntax looks like for my last blog post.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/website3.png&quot; alt=&quot;markdown syntax for my post&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this where my blog post content is pulled into my HMTL file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/website4.png&quot; alt=&quot;html template&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of this is rendered to my site to display like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/website5.png&quot; alt=&quot;blog post output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I didn’t have to set up a database or write logic that tells my site how to deal with each individual post. Following the convention of Jekyll projects, I was able to get my post content rendered to my site in minutes. Pretty cool, right? Now let’s discuss setting up Jekyll.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup/Configuration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll is a RubyGem. This means that, assuming you have a version of the &lt;a href=&quot;http://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; programming language installed on your machine, Jekyll can be installed using the following commands.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll
jekyll new my-website
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You should now have a new Jekyll project at ‘my-website’ on your computer. Since I already have a working site via my GitHub pages repository, I moved all of the files that Jekyll gave me into the same folder. Now is a good time to discuss what these files are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File Structure&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# from the Jekyll official documentation
.
├── _config.yml
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2017-07-02-quit-being-difficult.md
|   └── 2017-06-13-4-things-i-learned-toying-around-with-nested-resources-in-rails.md
├── _sass
|   └── _layout.scss
├── _site
└── index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For simplicity, I’ve pared down the file tree example from the official Jekyll documentation. The first file that you should edit is &lt;em&gt;_config.yml&lt;/em&gt;, which is the configuration file that contains settings and variables that become available for use throughout your site.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;_layouts&lt;/em&gt; folder is where your page templates are stored. I am currently only using two different templates for my site, one for blog posts – &lt;em&gt;post.html&lt;/em&gt; – and another for my home page called &lt;em&gt;default.html&lt;/em&gt;. As I mentioned earlier, these templates are just HTML files that are populated with content from associated Markdown files (where you write your plain text). Content from your posts and variables defined in your &lt;em&gt;_config.yml&lt;/em&gt; file will be available to these templates using double brackets.&lt;/p&gt;

&lt;p&gt;New posts must follow a certain naming convention (see below) to be recognized by the Jekyll logic.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# post example in _posts folder
YYYY-MM-DD-title.md
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;‘.md’&lt;/em&gt; here denotes Markdown syntax. Anything I write in these files is sent through my &lt;em&gt;post.html&lt;/em&gt; template and a ready-to-serve HTML file is generated in my &lt;em&gt;_site&lt;/em&gt; folder. In the &lt;em&gt;_site&lt;/em&gt; folder lies the magic of Jekyll. All of the HTML files, images and CSS/styling elements used in my website are copied over or generated in this folder. As you make changes to your ‘.md’ files in your &lt;em&gt;_posts&lt;/em&gt; folder, the accompanying HMTL file in the &lt;em&gt;_site&lt;/em&gt; folder gets re-generated. With GitHub pages, the only thing I need to do after creating or editing a post is pushing my commits up to my repository. It’s that easy – No part-time job necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Design/Layouts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The last that I want to touch on is using themes in Jekyll. Pre-made themes make it really easy to spin up a site that looks great in minutes. If you initialize your Jekyll project using the ‘jekyll new’ command, your site will come with a default theme named &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;minima&lt;/a&gt;. While this theme looks great, I wanted something even more pared down and swapped the theme for one called &lt;a href=&quot;https://github.com/pages-themes/minimal&quot;&gt;minimal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jekyll makes changing your theme extremely easy. In your &lt;em&gt;config.yml&lt;/em&gt; file, you can swap out your theme for a number of options available in the &lt;a href=&quot;https://rubygems.org/search?utf8=%E2%9C%93&amp;amp;query=jekyll-theme&quot;&gt;RubyGems library&lt;/a&gt;. I narrowed my search by reviewing the list of themes &lt;a href=&quot;https://pages.github.com/themes/&quot;&gt;supported by GitHub Pages&lt;/a&gt;. Each theme comes with it’s own default template for pages, so I would recommend copying this over from the GitHub repository for your chosen theme.&lt;/p&gt;

&lt;p&gt;I genuinely hope that this post has been helpful and that I’ve inspired you to create your own website. Don’t hesitate to reach out to me &lt;a href=&quot;https://twitter.com/yungpanko&quot;&gt;@yungpanko&lt;/a&gt; if you have any questions about my experience.&lt;/p&gt;

&lt;h2 id=&quot;additional-resources&quot;&gt;Additional resources:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@kswanie21/how-to-set-up-godaddy-domain-with-github-pages-a9300366c7b&quot;&gt;How to Set up GoDaddy Domain with GitHub Pages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;Jekyll Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yeswejekyll.com/&quot;&gt;YesWeJekyl Startup Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Jared Johnson</name></author><summary type="html">Last weekend, I decided to build my own personal website and I thought it would be a helpful resource to document the steps that I took to get jared-johnson.com up and running.</summary></entry><entry><title type="html">Quit being difficult and just tell me what the hell a closure is</title><link href="http://localhost:4000/2017/07/02/quit-being-difficult.html" rel="alternate" type="text/html" title="Quit being difficult and just tell me what the hell a closure is" /><published>2017-07-02T00:00:00-04:00</published><updated>2017-07-02T00:00:00-04:00</updated><id>http://localhost:4000/2017/07/02/quit-being-difficult</id><content type="html" xml:base="http://localhost:4000/2017/07/02/quit-being-difficult.html">&lt;blockquote&gt;
  &lt;p&gt;functions in JavaScript form closures. A closure is the combination of a function and the lexical
environment within which that function was declared. (Mozilla Developer Network)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Great. We can all go home now.&lt;/p&gt;

&lt;p&gt;…..I’m kidding.&lt;/p&gt;

&lt;p&gt;We’re going to look at some code but let’s break down what this definition is trying to tell us. &lt;em&gt;“a function is a closure”&lt;/em&gt; — cool — , and &lt;em&gt;“a closure is the combination of a function and the lexical environment within which that function was declared.”&lt;/em&gt; This means that functions in JavaScript are more aware of their surrounding than functions or methods in other languages that do not have closures. JavaScript functions are familiar with the variables that exist in the environment where we create them.&lt;/p&gt;

&lt;p&gt;If you employ the services of google to help you understand what a closure is, you will likely come across code examples with nested functions. There is a valid reason for this, as these functions help to demonstrate how different environments can change our closures, but the definition above explains that &lt;strong&gt;ALL&lt;/strong&gt; functions are closures. We don’t have to get fancy to explain what the hell this thing really is.&lt;/p&gt;

&lt;p&gt;In my first example, I am declaring a variable, &lt;em&gt;name&lt;/em&gt;, with the value of my name. Then, I am writing a function, &lt;em&gt;printName&lt;/em&gt;, that console logs the name variable that I declared above it. If you test this out yourself, you will see that it works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/qbd1.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It may seem obvious that this works but — look closely — we never called our &lt;em&gt;printName&lt;/em&gt; function with an argument. What’s remarkable about what this function is doing is the very thing that makes it a closure. Our function was able to grab the name variable declared outside of itself, and within the global environment, to complete our operation.&lt;/p&gt;

&lt;h2 id=&quot;now-we-understand-what-a-closure-is-but-how-and-why-would-we-use-it&quot;&gt;Now we understand what a closure is but how and why would we use it?&lt;/h2&gt;
&lt;h3 id=&quot;private-methods-and-module-pattern&quot;&gt;Private methods and module pattern&lt;/h3&gt;

&lt;p&gt;I’m going to cover two examples where your newfound understanding of closures can help. The first is private methods. A private method in JavaScript is a function that can only be accessed through another function. A quick example is below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/qbd2.png&quot; alt=&quot;img2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, I have defined a function, &lt;em&gt;publicFunction&lt;/em&gt;, that returns another function, secretFunction. Both of these functions are closures, by definition, but only &lt;em&gt;publicFunction&lt;/em&gt; can be readily called by itself. When we try to console log our &lt;em&gt;secretFunction&lt;/em&gt;, we are told that it is not defined.
In &lt;em&gt;publicFunction&lt;/em&gt;, I have employed a syntax that will be familiar if you have dealt with objects in JavaScript. By writing the return for &lt;em&gt;publicFunction&lt;/em&gt; as &lt;em&gt;“function name: function,”&lt;/em&gt; or in module pattern, we are able to call the inner function by chaining our call, similar to how we would retrieve attributes from an object. Let’s see that in action.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/qbd3.png&quot; alt=&quot;img3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JavaScript’s use of closures allows us to hide our secretFunction from the rest of our global scope and even reuse the name in other functions.&lt;/p&gt;

&lt;h3 id=&quot;partial-application-and-currying&quot;&gt;Partial application and currying&lt;/h3&gt;

&lt;p&gt;Understanding closures is also important for understanding the mechanics of partial application and currying. When we pass arguments into functions that return functions, our return functions, or closures, are aware of these arguments.&lt;/p&gt;

&lt;p&gt;Let’s examine the code below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/qbd4.png&quot; alt=&quot;img4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, I am defining a function, &lt;em&gt;multiplyNumbers&lt;/em&gt;, that accepts two numbers and returns their product. I have written this function to return another function in the case that it only receives one argument. This return function, or closure, can access the first variable that we gave our outer function, &lt;em&gt;multiplyNumbers&lt;/em&gt;, and complete our operation. At the bottom of the screenshot, you can see that both ways (passing both arguments into the outer function AND passing the first argument to the outer function and the second to the inner function) return the same result.&lt;/p&gt;

&lt;p&gt;We can supply our outer function only one argument and name the resulting function (see below).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/qbd5.png&quot; alt=&quot;img5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I believe that the power of closures truly shines here. Our named methods, &lt;em&gt;multiplyByFive&lt;/em&gt; and &lt;em&gt;multiplyByFour&lt;/em&gt;, were birthed by the same function, &lt;em&gt;multiplyNumbers&lt;/em&gt;. They only differ in the environment scope that they refer to. The first argument for &lt;em&gt;multiplyByFive&lt;/em&gt; is still 5, even after the creation of an additional function, &lt;em&gt;multiplyByFour&lt;/em&gt;, that takes in a different first argument. Pretty cool, right?&lt;/p&gt;

&lt;p&gt;Thanks for reading this. I hope you’ve learned that functions in JavaScript can be more than meets the eye. Below are additional resources on closures and how understanding them becomes useful in functional programming.&lt;/p&gt;

&lt;h2 id=&quot;additional-resources&quot;&gt;Additional resources:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36&quot;&gt;Master the JavaScript Interview: What is a Closure?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;MDN: Closures&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc&quot;&gt;JavaScript Modules: A Beginner’s Guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Jared Johnson</name></author><summary type="html">functions in JavaScript form closures. A closure is the combination of a function and the lexical environment within which that function was declared. (Mozilla Developer Network)</summary></entry><entry><title type="html">4 things i learned toying around with nested resources in Rails</title><link href="http://localhost:4000/2017/06/13/4-things-i-learned-toying-around-with-nested-resources-in-rails.html" rel="alternate" type="text/html" title="4 things i learned toying around with nested resources in Rails" /><published>2017-06-13T20:19:00-04:00</published><updated>2017-06-13T20:19:00-04:00</updated><id>http://localhost:4000/2017/06/13/4-things-i-learned-toying-around-with-nested-resources-in-rails</id><content type="html" xml:base="http://localhost:4000/2017/06/13/4-things-i-learned-toying-around-with-nested-resources-in-rails.html">&lt;p&gt;Let’s table set — what is a nested resource?&lt;/p&gt;

&lt;p&gt;I’m referring to a type of routing mechanism available to use in Ruby on Rails. The &lt;em&gt;‘resources’&lt;/em&gt; syntax is a useful way to have Rails generate each of the CRUD routes for you. Take a look below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/nested1.png&quot; alt=&quot;config/routes.rb in my rails application&quot; /&gt;
&lt;em&gt;config/routes.rb in my rails application&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here, in my &lt;em&gt;config/routes.rb&lt;/em&gt; file, I am using the &lt;em&gt;‘resources’&lt;/em&gt; keyword to draw routes for my &lt;em&gt;‘Artist’&lt;/em&gt; model. Now, when I run &lt;em&gt;‘rake routes,’&lt;/em&gt; I can see that the following routes have been generated for me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/nested2.png&quot; alt=&quot;‘rake routes’ returns the full list of rails routes to your terminal — ‘rake’ is a ruby gem that is required for this call&quot; /&gt;
&lt;em&gt;‘rake routes’ returns the full list of rails routes to your terminal — ‘rake’ is a ruby gem that is required for this call&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If i want to expand my model to include songs, I have some choices to make. I could have Rails generate a suite of routes beginning with &lt;em&gt;‘/songs’&lt;/em&gt; for me, just as I have done with artists OR I could choose to nest these routes underneath those that I have already drawn for artists. The latter would look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/nested3.png&quot; alt=&quot;Here, I am passing my songs resources in as a block underneath ‘artists’&quot; /&gt;
&lt;em&gt;Here, I am passing my songs resources in as a block underneath ‘artists’&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The nested approach provides me with the following list of routes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/nested4.png&quot; alt=&quot;routes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here lies the first thing that I learned about nested routes.&lt;/p&gt;

&lt;h2 id=&quot;1-the-id-is-appended-with-the-name-of-previous-model-at-each-level-of-nesting&quot;&gt;#1 The :id is appended with the name of previous model at each level of nesting.&lt;/h2&gt;

&lt;p&gt;My &lt;em&gt;‘/artists/:id’&lt;/em&gt; convention becomes &lt;em&gt;‘/artists/:artist_id/songs/:id’&lt;/em&gt; once I navigate into my song routes. Why is this syntax change important? Now when my application receives a request to any of the actions defined in my SongsController, an artist ID is passed to me in the format of &lt;em&gt;‘params[:artist_id].’&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If I want my &lt;em&gt;songs#index&lt;/em&gt; action to display a collection of songs that belong to the artist that I am navigating under, I will need to pass &lt;em&gt;‘params[:artist_id]’&lt;/em&gt; in as an argument to stipulate that I only want songs from the artist who’s ID matches (see below).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/nested5.png&quot; alt=&quot;app/controllers/songs_controller.rb&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-the-form_for-rails-helper-method-requires-you-to-pass-in-an-object-for-each-level-of-nesting&quot;&gt;#2 The ‘form_for’ Rails helper method requires you to pass in an object for each level of nesting.&lt;/h2&gt;

&lt;p&gt;Rails comes pre-loaded with a bunch of different useful helper methods, one of which is &lt;em&gt;‘form_for,’&lt;/em&gt; which assists with the routing for model-based form input.&lt;/p&gt;

&lt;p&gt;Typically, I would use an instance of a model as the sole argument in a form. When we create a new song, with the models outlined earlier, what we are really doing is creating a new song object that belongs to an artist object. Therefore, without letting our &lt;em&gt;‘form_for’&lt;/em&gt; element which artist we want to relate the form input to as well as which song, our ‘form_for’ model will not work. An example of my form for creating a new song is below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/nested6.png&quot; alt=&quot;form_For&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-nesting-can-get-out-of-hand-very-quickly&quot;&gt;#3 Nesting can get out of hand very quickly&lt;/h2&gt;

&lt;p&gt;Simple demonstration: I’m going to add resources for &lt;em&gt;‘lyrics’&lt;/em&gt; underneath my nested &lt;em&gt;‘songs’&lt;/em&gt; resources.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/nested7.png&quot; alt=&quot;yeah, there’s gotta be a better way&quot; /&gt;
&lt;em&gt;yeah, there’s gotta be a better way&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-nesting-best-practices&quot;&gt;#4 Nesting best practices&lt;/h2&gt;

&lt;p&gt;From &lt;a href=&quot;http://weblog.jamisbuck.org/2007/2/5/nesting-resources&quot; title=&quot;Nesting resources&quot;&gt;Jamis Buck’s blog post&lt;/a&gt; (also referenced in the Rails guide):&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Resources should never be nested more than 1 level deep.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Buck’s blog post suggests an advanced method for keeping your routes and URLs from getting out of control but I wanted to highlight two quick ways that you can refactor your code.&lt;/p&gt;

&lt;h3 id=&quot;shallow-nesting&quot;&gt;Shallow nesting&lt;/h3&gt;
&lt;p&gt;Adding the &lt;em&gt;‘shallow: true’&lt;/em&gt; parameter to your nested resource will define routes at the base level, &lt;em&gt;‘/songs/’&lt;/em&gt;, for four of our RESTful routes — &lt;em&gt;show&lt;/em&gt;, &lt;em&gt;edit&lt;/em&gt;, &lt;em&gt;update&lt;/em&gt; and &lt;em&gt;destroy&lt;/em&gt;, while leaving the remaining routes — &lt;em&gt;index, new, create&lt;/em&gt;— at the nested level. So how is this useful to us?&lt;/p&gt;

&lt;p&gt;In my model, with artists and songs, we are now able to use the routes starting with &lt;em&gt;‘/songs/:id’&lt;/em&gt; to view or modify existing songs on an individual basis. Recall that songs belong to artists, so upon creation, we still need to initialize a song with an artist relationship. However, once a song is created, it doesn’t matter to artist relationship if we would like to edit or delete it. And so, we don’t need to follow a lengthy route, such as &lt;em&gt;‘/artists/:artist_id/songs/:id/edit’&lt;/em&gt; to make our changes.&lt;/p&gt;

&lt;h3 id=&quot;collectionmember-blocks&quot;&gt;Collection/Member blocks&lt;/h3&gt;

&lt;p&gt;While it would not help to simplify my model, collection and member blocks can be used to create routes with specific dependencies.&lt;/p&gt;

&lt;p&gt;Thank you for reading and be sure to check out the additional resources linked below.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://weblog.jamisbuck.org/2007/2/5/nesting-resources&quot; title=&quot;Nesting resources&quot;&gt;Nesting resources, http://weblog.jamisbuck.org/2007/2/5/nesting-resources&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2034700/form-for-with-nested-resources&quot;&gt;Form for with nested resources, https://stackoverflow.com/questions/2034700/form-for-with-nested-resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Jared Johnson</name></author><summary type="html">Let’s table set — what is a nested resource?</summary></entry><entry><title type="html">Ruby Operators: Double Pipe Equals</title><link href="http://localhost:4000/2017/05/24/ruby-operators-double-pipe-equals.html" rel="alternate" type="text/html" title="Ruby Operators: Double Pipe Equals" /><published>2017-05-24T00:00:00-04:00</published><updated>2017-05-24T00:00:00-04:00</updated><id>http://localhost:4000/2017/05/24/ruby-operators-double-pipe-equals</id><content type="html" xml:base="http://localhost:4000/2017/05/24/ruby-operators-double-pipe-equals.html">&lt;h2 id=&quot;hey-what-does-that--mean-in-your-ruby-code&quot;&gt;&lt;em&gt;“Hey, what does that ||= mean in your ruby code?”&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;In my first blog post as a programmer, I thought it would be appropriate to explain one of the questions that I was asked during my first day at &lt;a href=&quot;https://flatironschool.com/&quot;&gt;Flatiron School&lt;/a&gt;. This is a question that I had come up about a month ago and one that led me down a rabbit hole of ruby forums and reddit posts (I’ll save you the trouble and link a few of the better sources at the bottom of this post).&lt;/p&gt;

&lt;p&gt;The controversy behind “double-pipe equals” is centered around how the operator should be translated but I’d like to focus this post on the applications that I have found for it. So, what exactly does &lt;em&gt;||=&lt;/em&gt; do? My own definition is that &lt;em&gt;“double-pipe equals”&lt;/em&gt; is an operator that assigns a value, much like &lt;em&gt;=&lt;/em&gt; or our classic assignment operator, but will only complete the assignment if the left side of our operation returns false or nil.&lt;/p&gt;

&lt;p&gt;Let me demonstrate.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With a set to nil, it is easy to see that setting a &lt;em&gt;“equal”&lt;/em&gt; to b using the classic assignment operator would return a with the value of 4. But what if we used &lt;em&gt;“double-pipe equals”&lt;/em&gt; instead?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, we get the same result. When a is set to nil (or anything that evaluates to false), the &lt;em&gt;||=&lt;/em&gt; operator functions the same as &lt;em&gt;=&lt;/em&gt; would. Let’s look at an example where a is given a &lt;em&gt;“truthy”&lt;/em&gt; value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the example above, a retains its original value even though it has been operated on through our &lt;em&gt;“double-pipe equals”&lt;/em&gt;. This happens because the &lt;em&gt;||&lt;/em&gt; acts as a &lt;em&gt;“circuit”&lt;/em&gt; in this method. As &lt;a href=&quot;http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html&quot;&gt;Peter Cooper&lt;/a&gt; explains,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the left hand side of the comparison is true, there’s no need to check the right hand side.
When ruby saw that a was already assigned to the value of 2, it stopped executing our code. Where I have
found this sort of conditional assignment most useful is in iteration. Let’s iterate through an array of
popular fruits, using our ||= method to assign each of the strings to a.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;orange&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fruit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fruit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [&quot;apple&quot;,&quot;orange&quot;,&quot;banana&quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;apple&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see that, after our iteration, a is assigned to the first string in our array, &lt;em&gt;“apple”&lt;/em&gt; . After a becomes &lt;em&gt;“apple”&lt;/em&gt;, our &lt;em&gt;“double-pipe equals”&lt;/em&gt; will not let anything to the right of it reassign our variable.&lt;/p&gt;

&lt;p&gt;While ruby has methods that can return the first element of an array without iteration, it can sometimes be useful to control for whether or not a variable has been assigned with a &lt;em&gt;“truthy”&lt;/em&gt; value. Below is a code snippet from one of my recent labs where I found &lt;em&gt;||=&lt;/em&gt; particularly useful.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;School&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:roster&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
      &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;    
      &lt;span class=&quot;vi&quot;&gt;@roster&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@roster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@roster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, I have defined a class, &lt;em&gt;School&lt;/em&gt;, along with a couple of methods. The key thing to understand is that by calling &lt;em&gt;roster&lt;/em&gt; on an instance of my &lt;em&gt;School&lt;/em&gt; class, I am looking to return my list of students as a hash of grades pointing to an array of students associated with each grade.&lt;/p&gt;

&lt;p&gt;Lets instantiate an example school and populate some students.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;metro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;School&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Metro High&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;metro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Jared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;metro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;roster&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; {9=&amp;gt;[&quot;Jared&quot;]}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;metro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Graham&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;metro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;roster&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; {9=&amp;gt;[&quot;Jared&quot;,&quot;Graham&quot;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To add a student to the roster of my &lt;em&gt;School&lt;/em&gt; instance, I have to pass the &lt;em&gt;add_student&lt;/em&gt; method a name and a grade. However, we can see that when I added &lt;em&gt;“Graham”&lt;/em&gt; and his corresponding grade, &lt;em&gt;9&lt;/em&gt;, his name was added to the existing array that was created when I added &lt;em&gt;“Jared”&lt;/em&gt;. This is the magic of &lt;em&gt;||=&lt;/em&gt;. In this case, the &lt;em&gt;“double-pipe equals”&lt;/em&gt; operator recognized that a grade key has already been added and had my add_student method used &lt;em&gt;=&lt;/em&gt; instead of &lt;em&gt;||=&lt;/em&gt;, I would have overwritten my student entry &lt;em&gt;“Jared”&lt;/em&gt; when I added another student in grade &lt;em&gt;9&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;additional-resources&quot;&gt;Additional resources:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html&quot;&gt;What Ruby’s Double Pipe / Or Equals Really Does&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.ruby-forum.com/topic/151660/&quot;&gt;The definitive list of OR Equal threads and pages&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Jared Johnson</name></author><summary type="html">“Hey, what does that ||= mean in your ruby code?”</summary></entry></feed>